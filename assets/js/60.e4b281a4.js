(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{472:function(a,s,t){"use strict";t.r(s);var e=t(2),l=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"模型保存和重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型保存和重载"}},[a._v("#")]),a._v(" 模型保存和重载")]),a._v(" "),s("p",[a._v("​\t在众多训练好的模型中会有几个较好的模型，我们希望储存这些模型对应的参数值，避免后续难以训练出更好的结果。PyTorch提供了模型的保存与重载模块，包括torch.save()和torch.load()，以及pytorchtools中的EarlyStopping。")]),a._v(" "),s("h2",{attrs:{id:"保存与重载模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保存与重载模块"}},[a._v("#")]),a._v(" 保存与重载模块")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("保存/加载模型的参数，不保存/加载模型的结构")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import torch\n#保存\ntorch.save(model.state_dict(), 'model_params.pth')↓\n#加载\nmodel=init_model（）#先初始化一个模型，这里是伪代码，↓\nmodel.load_state_dict(torch.load('model_params-pth'))\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("其中state_dict为参数字典，model_params.pth为保存的文件路径。")])]),a._v(" "),s("li",[s("p",[a._v("保存/加载模型的参数和结构")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#保存\ntorch.save(model, 'model_params.pth')\n#加载\nmodel = torch.load('model_params.pth')\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])]),a._v(" "),s("h2",{attrs:{id:"earlystopping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#earlystopping"}},[a._v("#")]),a._v(" EarlyStopping")]),a._v(" "),s("p",[a._v("为了获取性能良好的神经网络，训练网络的过程中需要进行许多对于模型各部分的设置，也就是超参数的调整。")]),a._v(" "),s("p",[a._v("例如超参数之一：epoch。取值过小可能会导致欠拟合，取值过大可能会导致过拟合。")]),a._v(" "),s("p",[a._v("原理")]),a._v(" "),s("ol",[s("li",[a._v("将原数据"),s("strong",[a._v("分为训练集和验证集")]),a._v("；")]),a._v(" "),s("li",[a._v("只在训练集上进行训练，并每隔一个周期计算模型在验证集上的误差，"),s("strong",[a._v("如果随着周期的增加，在验证集上的测试误差也在增加，则停止训练")]),a._v("；")]),a._v(" "),s("li",[a._v("将停止之后的权重作为网络的最终参数")])]),a._v(" "),s("p",[a._v("代码")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("from pytorchtools import EarlyStopping\nearly_stopping = EarlyStopping(patience = 20, verbose = False,\ndelta=0)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("参数含义")]),a._v(" "),s("ul",[s("li",[a._v("patience(int) : 上次验证集损失值改善后等待几个epoch，默认值：7。")]),a._v(" "),s("li",[a._v("verbose(bool)：如果值为True，为每个验证集损失值打印一条信息；若为False，则不打印，默认值：False。")]),a._v(" "),s("li",[a._v("delta(float)：损失函数值改善的最小变化，当损失函数值的改善大于该值时，将会保存模型，默认值：0，即损失函数只要有改善即保存模型")])])])}),[],!1,null,null,null);s.default=l.exports}}]);