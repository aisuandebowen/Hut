(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{475:function(s,a,t){"use strict";t.r(a);var n=t(2),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"模型保存和重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型保存和重载"}},[s._v("#")]),s._v(" 模型保存和重载")]),s._v(" "),a("p",[s._v("​\t在众多训练好的模型中会有几个较好的模型，我们希望储存这些模型对应的参数值，避免后续难以训练出更好的结果。PyTorch提供了模型的保存与重载模块，包括torch.save()和torch.load()，以及pytorchtools中的EarlyStopping。")]),s._v(" "),a("h2",{attrs:{id:"保存与重载模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存与重载模块"}},[s._v("#")]),s._v(" 保存与重载模块")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("保存/加载模型的参数，不保存/加载模型的结构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import torch\n#保存\ntorch.save(model.state_dict(), 'model_params.pth')↓\n#加载\nmodel=init_model（）#先初始化一个模型，这里是伪代码，↓\nmodel.load_state_dict(torch.load('model_params-pth'))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("其中state_dict为参数字典，model_params.pth为保存的文件路径。")])]),s._v(" "),a("li",[a("p",[s._v("保存/加载模型的参数和结构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#保存\ntorch.save(model, 'model_params.pth')\n#加载\nmodel = torch.load('model_params.pth')\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"earlystopping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#earlystopping"}},[s._v("#")]),s._v(" EarlyStopping")]),s._v(" "),a("p",[s._v("为了获取性能良好的神经网络，训练网络的过程中需要进行许多对于模型各部分的设置，也就是超参数的调整。")]),s._v(" "),a("p",[s._v("例如超参数之一：epoch。取值过小可能会导致欠拟合，取值过大可能会导致过拟合。")]),s._v(" "),a("p",[s._v("原理")]),s._v(" "),a("ol",[a("li",[s._v("将原数据"),a("strong",[s._v("分为训练集和验证集")]),s._v("；")]),s._v(" "),a("li",[s._v("只在训练集上进行训练，并每隔一个周期计算模型在验证集上的误差，"),a("strong",[s._v("如果随着周期的增加，在验证集上的测试误差也在增加，则停止训练")]),s._v("；")]),s._v(" "),a("li",[s._v("将停止之后的权重作为网络的最终参数")])]),s._v(" "),a("p",[s._v("代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('from pytorchtools import EarlyStopping\nearly_stopping = EarlyStopping(patience = 20, verbose = False,\ndelta=0)\n\nfor e in range(epoch):\n   ... pass\n   model.eval() # 设置模型为评估/测试模式\n   # 一般如果验证集不是很大的话，模型验证就不需要按批量进行了，但要注意输入参数的维度不能错\n   valid_output = model(X_val)\n   valid_loss = criterion(valid_output, y_val)\t# 注意这里的输入参数维度要符合要求，我这里为了简单，并未考虑这一点\n   \n   early_stopping(valid_loss, model)\n   # 若满足 early stopping 要求\n   if early_stopping.early_stop:\n      print("Early stopping")\n      # 结束模型训练\n      break\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("参数含义")]),s._v(" "),a("ul",[a("li",[s._v("patience(int) : 上次验证集损失值改善后等待几个epoch，默认值：7。")]),s._v(" "),a("li",[s._v("verbose(bool)：如果值为True，为每个验证集损失值打印一条信息；若为False，则不打印，默认值：False。")]),s._v(" "),a("li",[s._v("delta(float)：损失函数值改善的最小变化，当损失函数值的改善大于该值时，将会保存模型，默认值：0，即损失函数只要有改善即保存模型")])])])}),[],!1,null,null,null);a.default=e.exports}}]);